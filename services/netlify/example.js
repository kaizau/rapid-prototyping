!(function (n, e) { for (const t in e)n[t] = e[t]; }(exports, (function (n) { const e = {}; function t(r) { if (e[r]) return e[r].exports; const o = e[r] = { i: r, l: !1, exports: {} }; return n[r].call(o.exports, o, o.exports, t), o.l = !0, o.exports; } return t.m = n, t.c = e, t.d = function (n, e, r) { t.o(n, e) || Object.defineProperty(n, e, { enumerable: !0, get: r }); }, t.r = function (n) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(n, '__esModule', { value: !0 }); }, t.t = function (n, e) { if (1 & e && (n = t(n)), 8 & e) return n; if (4 & e && typeof n === 'object' && n && n.__esModule) return n; const r = Object.create(null); if (t.r(r), Object.defineProperty(r, 'default', { enumerable: !0, value: n }), 2 & e && typeof n !== 'string') for (const o in n)t.d(r, o, ((e) => { return n[e]; }).bind(null, o)); return r; }, t.n = function (n) { const e = n && n.__esModule ? function () { return n.default; } : function () { return n; }; return t.d(e, 'a', e), e; }, t.o = function (n, e) { return Object.prototype.hasOwnProperty.call(n, e); }, t.p = '', t(t.s = 5); }([function (n, e, t) { t(1).config(t(4)(process.argv)); }, function (n, e, t) { const r = t(2); const o = t(3); function c(n) { console.log(`[dotenv][DEBUG] ${n}`); } function u(n, e) { const t = Boolean(e && e.debug); const r = {}; return n.toString().split('\n').forEach((n, e) => { const o = n.match(/^\s*([\w.-]+)\s*=\s*(.*)?\s*$/); if (o != null) { const n = o[1]; let e = o[2] || ''; const t = e ? e.length : 0; t > 0 && e.charAt(0) === '"' && e.charAt(t - 1) === '"' && (e = e.replace(/\\n/gm, '\n')), e = e.replace(/(^['"]|['"]$)/g, '').trim(), r[n] = e; } else t && c(`did not match key and value when parsing line ${e + 1}: ${n}`); }), r; } function i(n) { let e = o.resolve(process.cwd(), '.env'); let t = 'utf8'; let i = !1; n && (n.path != null && (e = n.path), n.encoding != null && (t = n.encoding), n.debug != null && (i = !0)); try { const n = u(r.readFileSync(e, { encoding: t }), { debug: i }); return Object.keys(n).forEach((e) => { process.env.hasOwnProperty(e) ? i && c(`"${e}" is already defined in \`process.env\` and will not be overwritten`) : process.env[e] = n[e]; }), { parsed: n }; } catch (n) { return { error: n }; } }n.exports.config = i, n.exports.load = i, n.exports.parse = u; }, function (n, e) { n.exports = require('fs'); }, function (n, e) { n.exports = require('path'); }, function (n, e) { const t = /^dotenv_config_(encoding|path|debug)=(.+)$/; n.exports = function (n) { return n.reduce((n, e) => { const r = e.match(t); return r && (n[r[1]] = r[2]), n; }, {}); }; }, function (n, e, t) {
  t.r(e); t(0); function r(n, e, t) { t(null, (function (n, e) { return { statusCode: n, headers: { 'content-type': 'application/json; charset=utf-8' }, body: JSON.stringify(e) }; }(200, ':)'))); }t.d(e, 'handler', () => { return r; });
}]))));
